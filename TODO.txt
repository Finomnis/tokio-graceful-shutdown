Prepation:
    - Rework errors
    -

- Add global_shutdown token to tokens
- Add cancellation_token to tokens

Every subsysten has 4 tokens:
- global_shutdown
- group_shutdown
- local_shutdown
- cancellation

Now, nested toplevel is possible:
- global -> global
- local.child -> group
              -> local
- cancellation.child -> cancellation

Otherwise, for non-toplevel:
- global -> global
- group -> group
- local.child -> local
- cancellation.child -> cancellation

- Require Toplevel / Nested toplevel to be consumed

Naming:
    - SubsystemHandle::create_decoupled_toplevel() -> NestedToplevel

More knowledge:
    - "Subsystem finished" only needs to be propagated to toplevel (if toplevel should auto-stop)

Problem: Errors never get propagated up. (Is that desired?) (I don't think so, whether people handle errors at the top or at a nested tokio::spawn shouldn't matter)

- rewrite example 12 with new nested toplevel

- Question: should nested toplevel keep parent toplevel from auto-shutdown?
    Answer: yes? No? Unsure ... it shouldn't matter, because someone has to query the error code of
            the nested toplevel
    Safest bet: store it in the nested toplevel and delete it in the handle_shutdown_requests function
                after the on_shutdown_requested call
                -> Write tests for that
